import { useState, useEffect } from 'react'
import { wasm_generate_stealth_meta_address, wasm_compute_stealth_key } from './rust-wasm/pkg/rust_wasm.js'

function Alice() {
  const [metaKey, setMetaKey] = useState()
  const [address, setAddress] = useState("")
  const [billPubKey, setBillPubKey] = useState("")
  const [privateKey, setPrivateKey] = useState("")

  useEffect(() => {
    try {
      if (metaKey && address.length == 40 && billPubKey.length == 66) {
        setPrivateKey(wasm_compute_stealth_key(
          address, 
          billPubKey, 
          metaKey.view_private_key,
          metaKey.spend_private_key))
      } else {
          setPrivateKey("")
      }
    } catch (err) {
      setPrivateKey("Error: " + err)
    }
  }, [address, billPubKey])

  const getVariableHtml = (varName, subscript) =>
    ` <i>(${varName}<sub>${subscript}</sub>)</i>`

  return (
    <>
      <div style={{'border': '2px solid red', 'padding': '10px', 'color': 'red'}} >
        <h2>Alice User Interface</h2>
        <button onClick={() => {
          setMetaKey(JSON.parse(wasm_generate_stealth_meta_address()))
          setAddress("")
          setBillPubKey("")
        }}>
          Generate a {metaKey && "new"} Stealth Meta Address
        </button><p />
        { metaKey &&
        (
          <div style={{
            overflow: "auto",
            whiteSpace: "nowrap",
          }}>
            <b>Stealth meta address
              <i> (K<sub>pub</sub>,V<sub>pub</sub>)</i>
            :</b> {metaKey.address}
            <br />
            <b>View private key 
              <span dangerouslySetInnerHTML={{__html: getVariableHtml("V", "priv")}} />
            :</b> {metaKey.view_private_key}
            <br />
            <b>Spend private key
              <span dangerouslySetInnerHTML={{__html: getVariableHtml("K", "priv")}} />
            :</b> {metaKey.spend_private_key}
            <br />
            <div style={{'border': '2px solid red', 'padding': '5px'}} >
              <h3>Private key for address generated by Bill</h3>
              Address:
              <input type="text" value={address}
                onChange={(e) => setAddress(e.target.value)}
                size="40"
              /> <br />
              Bill's public key
                <span dangerouslySetInnerHTML={{__html: getVariableHtml("R", "pub")}} />            
              :
              <input type="text" value={billPubKey}
                onChange={(e) => setBillPubKey(e.target.value)}
                size="66"
              /> <br />            
              { (billPubKey.length == 66 && address.length == 40) && (
                <>
                  <br />
                  <b>Private key:</b> {privateKey}
                </>
              )}
            </div>
          </div>
        )}
      </div>
    </>
  )
}

export default Alice

